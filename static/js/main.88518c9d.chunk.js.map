{"version":3,"sources":["component/dayMonth.js","component/weather.js","App.js","index.js"],"names":["current","Date","day","month","Weather","useState","city","setCity","tempCity","setTempCity","temp","setTemp","weatherIcon","setWeatherIcon","des","setDes","useEffect","a","finalURL","axios","get","data","weather","description","icon","main","fetchData","backgroundClass","className","type","placeholder","onChange","e","target","value","onClick","aria-hidden","src","alt","getDay","getDate","getMonth","getHours","getMinutes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAAIA,EAAU,IAAIC,KACZC,EAAM,CACV,SACA,SACA,UACA,YACA,WACA,SACA,YAEIC,EAAQ,CACZ,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OC0CaC,EA7DC,WAAO,IAAD,EACIC,mBAAS,SADb,mBACbC,EADa,KACPC,EADO,OAEYF,mBAAS,SAFrB,mBAEbG,EAFa,KAEHC,EAFG,OAGIJ,mBAAS,GAHb,mBAGbK,EAHa,KAGPC,EAHO,OAIkBN,mBACpC,gDALkB,mBAIbO,EAJa,KAIAC,EAJA,OAOER,mBAAS,SAPX,mBAObS,EAPa,KAORC,EAPQ,KASpBC,qBAAU,WAAM,4CACd,gCAAAC,EAAA,4DACmB,qDACF,uDACTC,EAFW,qDAEWZ,EADb,uDAFjB,SAIyBa,IAAMC,IAAIF,GAJnC,gBAIUG,EAJV,EAIUA,KACRN,EAAOM,EAAKC,QAAQ,GAAGC,aACvBV,EACE,qCAAuCQ,EAAKC,QAAQ,GAAGE,KAAO,WAEhEb,EAAQU,EAAKI,KAAKf,MATpB,6CADc,uBAAC,WAAD,wBAYdgB,KACC,CAACpB,IACJ,IAAIqB,EAAkB,eAMtB,OALIjB,EAAO,KACTiB,EAAkB,gBAGH,KAAbnB,GAAiBC,EAAYH,GAE/B,sBAAKsB,UAAWD,EAAhB,UACE,uBACEC,UAAU,eACVC,KAAK,OACLC,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOvB,EAAYuB,EAAEC,OAAOC,UAExC,mBACEN,UAAU,eACVO,QAAS,kBAAM5B,EAAQC,IACvB4B,cAAY,SAGd,oBAAIR,UAAU,mBAAd,SAAkCtB,IAClC,qBAAIsB,UAAU,eAAd,UACGlB,EACD,mBAAGkB,UAAU,iBAAiBQ,cAAY,SAF5C,QAIA,sBAAKR,UAAU,gCAAf,UACE,oBAAIA,UAAU,4BAAd,SAA2Cd,IAC3C,qBAAKuB,IAAKzB,EAAa0B,IAAI,QAE7B,oBAAIV,UAAU,cAAd,SAA6B1B,EAAIF,EAAQuC,YACzC,qBAAIX,UAAU,mBAAd,UACG5B,EAAQwC,UADX,IACuBrC,EAAMH,EAAQyC,YADrC,IACmDzC,EAAQ0C,WAD3D,IAEG1C,EAAQ2C,aAAe,IAAM,IAC7B3C,EAAQ2C,oBC9CFC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCHNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.88518c9d.chunk.js","sourcesContent":["let current = new Date();\r\nconst day = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\nconst month = [\r\n  \"Jan\",\r\n  \"Feb\",\r\n  \"Mar\",\r\n  \"Apr\",\r\n  \"May\",\r\n  \"Jun\",\r\n  \"Jul\",\r\n  \"Aug\",\r\n  \"Sep\",\r\n  \"Oct\",\r\n  \"Nov\",\r\n  \"Dec\",\r\n];\r\n\r\nexport { current };\r\nexport { day };\r\nexport { month };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { current, day, month } from \"./dayMonth\";\r\nconst Weather = () => {\r\n  const [city, setCity] = useState(\"Delhi\");\r\n  const [tempCity, setTempCity] = useState(\"Delhi\");\r\n  const [temp, setTemp] = useState(0);\r\n  const [weatherIcon, setWeatherIcon] = useState(\r\n    \"https://openweathermap.org/img/wn/10d@2x.png\"\r\n  );\r\n  const [des, setDes] = useState(\"clear\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const firstURL = \"https://api.openweathermap.org/data/2.5/weather?q=\";\r\n      const endURL = \"&units=metric&appid=b506986489a2e68bd6260c4068719ed1\";\r\n      const finalURL = firstURL + city + endURL;\r\n      const { data } = await axios.get(finalURL);\r\n      setDes(data.weather[0].description);\r\n      setWeatherIcon(\r\n        \"https://openweathermap.org/img/wn/\" + data.weather[0].icon + \"@2x.png\"\r\n      );\r\n      setTemp(data.main.temp);\r\n    }\r\n    fetchData();\r\n  }, [city]);\r\n  let backgroundClass = \"mainDiv warm\";\r\n  if (temp < 20) {\r\n    backgroundClass = \"mainDiv cold\";\r\n  }\r\n\r\n  if (tempCity === \"\") setTempCity(city);\r\n  return (\r\n    <div className={backgroundClass}>\r\n      <input\r\n        className=\"form-control\"\r\n        type=\"text\"\r\n        placeholder=\"eg. Delhi\"\r\n        onChange={(e) => setTempCity(e.target.value)}\r\n      ></input>\r\n      <i\r\n        className=\"fa fa-search\"\r\n        onClick={() => setCity(tempCity)}\r\n        aria-hidden=\"true\"\r\n      ></i>\r\n\r\n      <h2 className=\"text-center my-5\">{city}</h2>\r\n      <h3 className=\"text-center \">\r\n        {temp}\r\n        <i className=\"fa fa-circle-o\" aria-hidden=\"true\"></i> c\r\n      </h3>\r\n      <div className=\"d-flex justify-content-around\">\r\n        <h4 className=\"d-flex align-items-center\">{des}</h4>\r\n        <img src={weatherIcon} alt=\"\" />\r\n      </div>\r\n      <h2 className=\"text-center\">{day[current.getDay()]}</h2>\r\n      <h4 className=\"text-center mt-4\">\r\n        {current.getDate()} {month[current.getMonth()]} {current.getHours()}:\r\n        {current.getMinutes() < 10 && \"0\"}\r\n        {current.getMinutes()}\r\n      </h4>\r\n    </div>\r\n  );\r\n};\r\nexport default Weather;\r\n","import React from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Weather from \"./component/weather\";\nfunction App() {\n  return (\n    <div>\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}